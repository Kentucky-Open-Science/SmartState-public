// UML State diagram for a library loan, represented in Umple
class ReadGlucoseBase
{

  Integer startDeadline = 0;
  Integer startWarnDeadline = 0;
  Integer endOfEpisodeDeadline = 0;


  state {

    initial {
      entry / {
        // here we will retrieve all participants for this protocol then move into the waitStart state
        stateNotify("initial");
      };

      receivedWaitStart -> waitStart;
      receivedWarnStart -> warnStartGlucose;
      receivedEndProtocol -> endReadGlucoseProtocol;
    }

    waitStart {
      entry / {
        // here we will wait 30 minutes to receive a connection from each participant
        // possibly send a text saying to start measuring their glucose
        stateNotify("waitStart");
      };

        // if a connection is received move to startReading
      receivedStartGlucose -> startReading;
      
      // if the timer expires move to warnConnection, text user
      after(startDeadline) -> warnStartGlucose;
      
      receivedEndProtocol -> endReadGlucoseProtocol;
    }

     warnStartGlucose {
      entry / {
        // here we will wait an additional 30 minutes for a participant to start reading their glucose
        stateNotify("warnStartGlucose");
      };
      
        // if particpant starts glucose reading
      receivedStartGlucose -> startReading;
       
       // if the timer expires, move to missedStart
      after(startWarnDeadline) -> missedStart;
       
      receivedEndProtocol -> endReadGlucoseProtocol;

    }

    startReading {
      entry / {
        // here we will wait and record glucose for a participant, until the connection ends
        stateNotify("startReading");
      };
        // once finished move to finished state
      receivedEndConnection -> finishedReading;
      receivedEndProtocol -> endReadGlucoseProtocol;
      receivedError -> notifyAdmin;
    }
    
    finishedReading {
      entry / {
        // here we will do computations and save results in DB
        stateNotify("finishedReading");
      } -> endOfEpisode;
    }

    missedStart {
      entry / {
        // here we will send the user a text saying that an Admin will be contacting them
        stateNotify("missedStart");
      } -> notifyAdmin;

    }

    notifyAdmin {
      entry / {
        // here we will send a text to an admin notifying them of failures or when a user needs help
        stateNotify("notifyAdmin");
      } -> endOfEpisode;

    }
    
    endOfEpisode {
      // Normal End state
      entry / {
        stateNotify("endOfEpisode");
      };
      after(endOfEpisodeDeadline) -> waitStart;
      receivedEndProtocol -> endReadGlucoseProtocol;
    }
    
    endReadGlucoseProtocol {
      entry / {
        stateNotify("endReadGlucoseProtocol");
      };
    }

  }

  boolean stateNotify(String node) {return true;}
  int currentTime() {return 1;}
}

namespace -;

class ReadGlucoseBase
{
  position 50 30 109 45;
}