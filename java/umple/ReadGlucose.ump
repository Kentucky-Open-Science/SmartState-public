class ReadGlucoseBase
{
  Integer startDeadline = 0;
  Integer startWarnDeadline = 0;
  Integer endOfEpisodeDeadline = 0;


  state {
    initial {
      entry / {
        stateNotify("initial");
      };

      receivedWaitStart -> waitStart;
      receivedWarnStart -> warnStartGlucose;
      receivedStartGlucose -> startReading;
      receivedEndofEpisode -> endOfEpisode;
      receivedEndProtocol -> endReadGlucoseProtocol;
    }

    waitStart {
      entry / {
        stateNotify("waitStart");
      };
      receivedStartGlucose -> startReading;
      after(startDeadline) -> warnStartGlucose;
      receivedEndProtocol -> endReadGlucoseProtocol;
    }

     warnStartGlucose {
      entry / {
        stateNotify("warnStartGlucose");
      };
      receivedStartGlucose -> startReading;
      after(startWarnDeadline) -> missedStart;
      receivedEndProtocol -> endReadGlucoseProtocol;
    }

    startReading {
      entry / {
        stateNotify("startReading");
      };
      receivedEndConnection -> finishedReading;
      receivedEndProtocol -> endReadGlucoseProtocol;
      receivedError -> notifyAdmin;
    }
    
    finishedReading {
      entry / {
        stateNotify("finishedReading");
      } -> endOfEpisode;
    }

    missedStart {
      entry / {
        stateNotify("missedStart");
      } -> notifyAdmin;

    }

    notifyAdmin {
      entry / {
        stateNotify("notifyAdmin");
      } -> endOfEpisode;

    }
    
    endOfEpisode {
      entry / {
        stateNotify("endOfEpisode");
      };
      after(endOfEpisodeDeadline) -> waitStart;
      receivedEndProtocol -> endReadGlucoseProtocol;
    }
    
    endReadGlucoseProtocol {
      entry / {
        stateNotify("endReadGlucoseProtocol");
      };
    }

  }

  boolean stateNotify(String node) {return true;}
}
