// Code generated by Umple 1.32.1.6535.66c005ced

digraph "model" {
  compound = true;

  // Class: ReadGlucoseBase

    // Top and Bottom Level StateMachine: state
    
    // Start states are shown as a black circle
    node [ratio="auto" shape = point, fillcolor="black", width=0.2 ];
    start_ReadGlucoseBase_state [ tooltip = "Class ReadGlucoseBase, SM state, State start" ];
    
        
    // Format for normal states
    node [ratio="auto" shape = rectangle, width=1,style=rounded];
    
      // State: initial

      ReadGlucoseBase_state_initial [label = initial, tooltip = "Class ReadGlucoseBase, SM state, State initial&#13;Entry:
   // here we will retrieve all participants for this protocol then move into the waitStart state
   stateNotify(&quot;initial&quot;);"];
      // End State: initial

      // State: waitStart

      ReadGlucoseBase_state_waitStart [label = waitStart, tooltip = "Class ReadGlucoseBase, SM state, State waitStart&#13;Entry:
   // here we will wait 30 minutes to receive a connection from each participant
   // possibly send a text saying to start measuring their glucose
   stateNotify(&quot;waitStart&quot;);"];
      // End State: waitStart

      // State: warnStartGlucose

      ReadGlucoseBase_state_warnStartGlucose [label = warnStartGlucose, tooltip = "Class ReadGlucoseBase, SM state, State warnStartGlucose&#13;Entry:
   // here we will wait an additional 30 minutes for a participant to start reading their glucose
   stateNotify(&quot;warnStartGlucose&quot;);"];
      // End State: warnStartGlucose

      // State: startReading

      ReadGlucoseBase_state_startReading [label = startReading, tooltip = "Class ReadGlucoseBase, SM state, State startReading&#13;Entry:
   // here we will wait and record glucose for a participant, until the connection ends
   stateNotify(&quot;startReading&quot;);"];
      // End State: startReading

      // State: finishedReading

      ReadGlucoseBase_state_finishedReading [label = finishedReading, tooltip = "Class ReadGlucoseBase, SM state, State finishedReading&#13;Entry:
   // here we will do computations and save results in DB
   stateNotify(&quot;finishedReading&quot;);"];
      // End State: finishedReading

      // State: missedStart

      ReadGlucoseBase_state_missedStart [label = missedStart, tooltip = "Class ReadGlucoseBase, SM state, State missedStart&#13;Entry:
   // here we will send the user a text saying that an Admin will be contacting them
   stateNotify(&quot;missedStart&quot;);"];
      // End State: missedStart

      // State: notifyAdmin

      ReadGlucoseBase_state_notifyAdmin [label = notifyAdmin, tooltip = "Class ReadGlucoseBase, SM state, State notifyAdmin&#13;Entry:
   // here we will send a text to an admin notifying them of failures or when a user needs help
   stateNotify(&quot;notifyAdmin&quot;);"];
      // End State: notifyAdmin

      // State: endOfEpisode

      ReadGlucoseBase_state_endOfEpisode [label = endOfEpisode, tooltip = "Class ReadGlucoseBase, SM state, State endOfEpisode&#13;Entry:
   stateNotify(&quot;endOfEpisode&quot;);"];
      // End State: endOfEpisode

      // State: endReadGlucoseProtocol

      ReadGlucoseBase_state_endReadGlucoseProtocol [label = endReadGlucoseProtocol, tooltip = "Class ReadGlucoseBase, SM state, State endReadGlucoseProtocol&#13;Entry:
   stateNotify(&quot;endReadGlucoseProtocol&quot;);"];
      // End State: endReadGlucoseProtocol
    // End Top and Bottom Level StateMachine: state

  // All transitions
    start_ReadGlucoseBase_state -> ReadGlucoseBase_state_initial [  tooltip = "start to initial" ] ;
    ReadGlucoseBase_state_initial -> ReadGlucoseBase_state_waitStart [  label = "receivedWaitStart", tooltip = "From initial to waitStart on receivedWaitStart" ] ;
  
  ReadGlucoseBase_state_endOfEpisode -> ReadGlucoseBase_state_waitStart [  label = "after(endOfEpisodeDeadline)", tooltip = "From endOfEpisode to waitStart after(endOfEpisodeDeadline)" ] ;
  
  ReadGlucoseBase_state_initial -> ReadGlucoseBase_state_warnStartGlucose [  label = "receivedWarnStart", tooltip = "From initial to warnStartGlucose on receivedWarnStart" ] ;
  
  ReadGlucoseBase_state_waitStart -> ReadGlucoseBase_state_warnStartGlucose [  label = "after(startDeadline)", tooltip = "From waitStart to warnStartGlucose after(startDeadline)" ] ;
  
  ReadGlucoseBase_state_waitStart -> ReadGlucoseBase_state_startReading [  label = "receivedStartGlucose", tooltip = "From waitStart to startReading on receivedStartGlucose" ] ;
  
  ReadGlucoseBase_state_warnStartGlucose -> ReadGlucoseBase_state_startReading [  label = "receivedStartGlucose", tooltip = "From warnStartGlucose to startReading on receivedStartGlucose" ] ;
  
  ReadGlucoseBase_state_startReading -> ReadGlucoseBase_state_finishedReading [  label = "receivedEndConnection", tooltip = "From startReading to finishedReading on receivedEndConnection" ] ;
  
  ReadGlucoseBase_state_warnStartGlucose -> ReadGlucoseBase_state_missedStart [  label = "after(startWarnDeadline)", tooltip = "From warnStartGlucose to missedStart after(startWarnDeadline)" ] ;
  
  ReadGlucoseBase_state_startReading -> ReadGlucoseBase_state_notifyAdmin [  label = "receivedError", tooltip = "From startReading to notifyAdmin on receivedError" ] ;
  
  ReadGlucoseBase_state_missedStart -> ReadGlucoseBase_state_notifyAdmin [  tooltip = "From missedStart to notifyAdmin automatically" ] ;
  
  ReadGlucoseBase_state_finishedReading -> ReadGlucoseBase_state_endOfEpisode [  tooltip = "From finishedReading to endOfEpisode automatically" ] ;
  
  ReadGlucoseBase_state_notifyAdmin -> ReadGlucoseBase_state_endOfEpisode [  tooltip = "From notifyAdmin to endOfEpisode automatically" ] ;
  
  ReadGlucoseBase_state_initial -> ReadGlucoseBase_state_endReadGlucoseProtocol [  label = "receivedEndProtocol", tooltip = "From initial to endReadGlucoseProtocol on receivedEndProtocol" ] ;
  
  ReadGlucoseBase_state_waitStart -> ReadGlucoseBase_state_endReadGlucoseProtocol [  label = "receivedEndProtocol", tooltip = "From waitStart to endReadGlucoseProtocol on receivedEndProtocol" ] ;
  
  ReadGlucoseBase_state_warnStartGlucose -> ReadGlucoseBase_state_endReadGlucoseProtocol [  label = "receivedEndProtocol", tooltip = "From warnStartGlucose to endReadGlucoseProtocol on receivedEndProtocol" ] ;
  
  ReadGlucoseBase_state_startReading -> ReadGlucoseBase_state_endReadGlucoseProtocol [  label = "receivedEndProtocol", tooltip = "From startReading to endReadGlucoseProtocol on receivedEndProtocol" ] ;
  
  ReadGlucoseBase_state_endOfEpisode -> ReadGlucoseBase_state_endReadGlucoseProtocol [  label = "receivedEndProtocol", tooltip = "From endOfEpisode to endReadGlucoseProtocol on receivedEndProtocol" ] ;
  

}
